# servers & deployment
alias p='puma-dev -stop'
# alias deploy='bundle exec cap production deploy'
deploy () {
  # defaults to production
  if [ $# -eq 0 ]; then
    bundle exec cap production deploy
  else
    bundle exec cap $1 deploy
  fi
}
alias stage='bundle exec cap staging deploy'
alias resq='QUEUE=* bundle exec rake environment resque:work'
alias seeserv='tail -f log/development.log'
alias s='tail -f log/development.log'

# G I T
# project-specific
alias hgbump='git add . && git ci -m "hg bump"'
alias tdmbump='git add Gemfile* && git commit -m "TD Models version bump"'
alias esbump='git add Gemfile* && git commit -m "elasticsearch-talentdesk version bump"'
alias assbump='bundle update reach-assets && git add . && git ci -m "assets bump"'
# branch
alias gb='git branch'
alias seebranchdiff='subl $(git diff --name-only master head)'
alias gab='git ab | tail -n 20'
alias gba='git ab | tail -n 20'
alias gcor='git checkout --track'
# log
alias glg='git log --graph'
alias gl='git log --color=always --date=short | less -R'
alias mylog='git log | grep hinea -B 2 -A 4 | less'
# push
alias gpb='git branch | grep -e "^*" | cut -d" " -f 2 | xargs git push origin'
alias gpub='git branch | grep -e "^*" | cut -d" " -f 2 | xargs git pull origin'
alias gpbf='git branch | grep -e "^*" | cut -d" " -f 2 | xargs -n 1 -I branch_name git push origin branch_name --force-with-lease'
alias gps='git push && stage'
# status
alias gs='git status'
alias opendiff='subl $(git status --porcelain | awk '\''{print $2}'\'')'
# diff
alias gd='git diff'
alias gds='git diff --staged'
alias gdh='git diff head^'
# commit
alias gcm='git commit -m'
alias gc='git commit'
# stash
alias gsh='git stash'
alias gshp='git stash pop'
# checkout
alias gch='git checkout'
# add
alias gaa='git add -A'
alias ga='git add'
# reset
alias gr='git reset'
# pull
alias gp='git pull --no-edit'
# merge
alias gm='git merge --no-edit'
# see github URL
gh() {
  open `git remote -v | grep fetch | awk '{print $2}' | sed 's/git@/http:\/\//' | sed 's/com:/com\//'`| head -n1
}
# git get next commit on way to master
gnx() {
  git log --reverse --ancestry-path head..master --pretty=format:"%h" | head -1
}

# rails
alias b='bundle'
alias bund='bundle'
alias be='bundle exec'
alias testdbreset='rails db:environment:set db:drop db:create db:schema:load RAILS_ENV=test'
alias rc='rails c'
alias rser='rails s'
bump() {
  # date_regex='\(\d{4}.\d{2}.\d{2}\).rev\d+'
  gem=${PWD##*/}
  date_regex='[0-9]\{4\}\.[0-9]\{2\}\.[0-9]\{2\}'
  gem_date=$(sed -n -e "s/\.version\s*= \([0-9]\{4\}\.[0-9]\{2\}\.[0-9]\{2\}\).*/\1/p" "${PWD##*/}.gemspec")
  print $gem_date


  IFS=$'\t' read -r VAR1 VAR2 VAR3 \
    < <(sed 's/\.version\s*= \([0-9]\{4\}\.[0-9]\{2\}\.[0-9]\{2\}\).*/\1/p' \
             <<< "$TEXT"
       )


  DATE=`date +%Y.%m.%d`
  if [ "$gem_date" = "$DATE" ]; then
    # bump revision
    # sed -i "s/^gem '${gem}', '${gem_date}.rev\([0-9]+\)'/gem '${gem}', ''/g" Gemfile
    # sed -ei "s/\(^gem '${gem}', '${date_regex}\.rev[0-9]'[^;]*;/\1 /dev/stdout;/" your_file
    # sed -i '' "/^gem '${gem}'/ s| rev[0-9]*'| rev|" Gemfile
    print same
  else
    # set to rev0 of today's date
    # sed -ei "s/\(^gem '${gem}', '${date_regex}.*$/\1 replacement_stuff/" your_file
    sed -i '' "/^gem '${gem}'/ s| '${date_regex}\.rev[0-9]*'| '$DATE.rev0'|" Gemfile
    # sed -i '' "/^gem '${gem}'/ s| '[0-9]\{4\}\.[0-9]\{2\}\.[0-9]\{2\}\.rev[0-9]*'| `date +%Y.%m.%d`.rev0|" Gemfile
    print diff
  fi
  # var=$(grep -oE -m 1 "gem 'td-chimera-widgets', '.*'" Gemfile);
  # var="${var#*\'}"; var="${var%\'*}"
  # grep -o "gem 'td-chimera-widgets', '\(\d{4}.\d{2}.\d{2}\).rev\d+'" Gemfile
  print $gem_date
  print $DATE
}

# mysql
alias tddevdb='mysql -uroot -p talentdesk'
alias mysqld='/usr/local/mysql/bin/mysqld &> /dev/null &'

# elasticsearch
alias curles='curl -H "Authorization: Basic ZWxhc3RpYzoyMHJPSm1LenB5M0tnNmtzSHdnM1ZNTjU="'

# M I S C
export CLICOLOR=1
# set home to work
export START="/Users/matthew/"
if [[ $PWD == $HOME ]]; then
    cd $START
fi

# bash
alias ..='cd ..'
alias ngrep='grep -v grep'
alias clearr="clear && printf '\e[3J'"
# see all files in current directory and their LOC, ordered by LOC
loc() {
  find ./** -type f -exec wc -l {} + | sort -rn
}

eval "$(rbenv init -)"

export EDITOR='subl -w'
export HISTTIMEFORMAT="%d/%m/%y %T "
export HISTCONTROL=ignorespace

git-is-merged () {
  merge_destination_branch=$1
  merge_source_branch=$2

  merge_base=$(git merge-base $merge_destination_branch $merge_source_branch)
  merge_source_current_commit=$(git rev-parse $merge_source_branch)
  if [[ $merge_base = $merge_source_current_commit ]]
  then
    echo $merge_source_branch is merged into $merge_destination_branch
    return 0
  else
    echo $merge_source_branch is not merged into $merge_destination_branch
    return 1
  fi
}